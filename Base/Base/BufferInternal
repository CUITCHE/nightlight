//
//  String.inl
//  collection_codes
//
//  Created by hejunqiu on 2017/2/27.
//  Copyright © 2017年 CHE. All rights reserved.
//

#ifndef BUFFERINTERNAL
#define BUFFERINTERNAL

#include "Range.hpp"
#include "iterator"
#include "Exception.hpp"
#include "ComparisonResult"
#include <stdlib.h>
#include <atomic>
#include <mutex>
#include <algorithm>
#include <ostream>

using std::mutex;

CC_BEGIN

class BufferInternal
{
    using __type = uinteger;
    typedef __type value_type;
    typedef value_type *type_pointer;

#define __len__(__r) __r.__words[-1]
#define __cap__(__r) __r.__words[-2]
#define __ref__(__r) __r.__words[-3]
#define __buf_offset__ 3

    struct __rep { // only use utf-8
        __type * __words = 0;
        mutable mutex *mtx = 0;
        Range substr_range;
        uinteger auto_lock : 1;
        volatile uinteger is_locking : 1;
        uinteger substr : 1;
		uinteger unused : 1;

        __rep()
        :auto_lock(0)
        ,substr(0)
		,unused(0)
        ,substr_range()
        {
            ;
        }

        ~__rep()
        {
            release();
        }

        void lock() const
        {
            if (auto_lock) {
                mtx->lock();
            }
        }

        void unlock() const
        {
            if (auto_lock) {
                mtx->unlock();
            }
        }

        bool try_lock() const
        {
            if (auto_lock) {
                return mtx->try_lock();
            }
            return true;
        }

        void release()
        {
			if (unused) {
				return;
			}
            lock();
            do {
                if (__words == 0) {
                    break;
                }
                if (__words[-3] == 1) {
                    auto p = __words - __buf_offset__;
                    free(p);
                    __words = 0;
                    unlock();
                    delete mtx;
                    mtx = 0;
                    return;
                } else {
                    --__words[-3];
                }
                unlock();
            } while (0);
        }


        /**
         allocate memory.

         @param size Count of byte.
         @return a pointer point valid memory space.
         */
        static type_pointer allocate(uinteger size)
        {
            /* ---------------------------------
              |ref[-3]|cap[-2]|len[-1]|buffer[0]|
               ---------------------------------
             */
            uinteger alloced_size = (size / sizeof(value_type) + 1) * sizeof(value_type);
            type_pointer buf = (type_pointer)calloc(1, alloced_size + __buf_offset__  * sizeof(value_type));
            assert(buf, "buf is NULL!");
            buf[0] = 1;
            buf[1] = alloced_size;
            return buf + __buf_offset__;
        }

        static type_pointer reallocate(type_pointer buf, uinteger new_size)
        {
            if (new_size <= buf[-1]) {
                return buf;
            }
            uinteger allocated_size = (new_size / sizeof(value_type) + 1) * sizeof(value_type);
            type_pointer b = (type_pointer)realloc(buf - __buf_offset__,
                                                   allocated_size + __buf_offset__ * sizeof(value_type));
            assert(b, "Memory is not enough!");
            b[1] = allocated_size;
            return b + __buf_offset__;
        }
    };
    __rep __r;
public:
    using iterator = _CC::iterator<char *>;
    using const_iterator = _CC::iterator<const char *>;
    using reverse_iterator = _CC::reverse_iterator<iterator>;
    using const_reverse_iterator = _CC::reverse_iterator<const_iterator>;

#define __default_alloc_size__ sizeof(value_type)

    /// constructor
    // default
    explicit BufferInternal()
    {
        __r.__words = __rep::allocate(__default_alloc_size__);
    }

    // copy
    explicit BufferInternal(const BufferInternal &other)
    {
		*this = other;
    }

    // substring
    explicit BufferInternal(const BufferInternal &str, Range subRange)
    :BufferInternal(str)
    {
        __r.substr_range = subRange;
        __r.substr = 1;
    }

    // from c-string
    explicit BufferInternal(const char *s)
    :BufferInternal(s, strlen(s))
    {}

    // from buffer
    explicit BufferInternal(const char *s, uinteger length)
    {
        __r.__words = __rep::allocate(length);
		write(0, s, length);
    }

    // fill
    explicit BufferInternal(const char c, uinteger fillCount)
    {
        parameterAssert(fillCount != 0);
        __r.__words = __rep::allocate(fillCount);
        __len__(__r) = fillCount;
        auto p = __get_pointer();
        do {
            *p++ = c;
        } while (--fillCount);
    }
    // range
    template<class InputIterator>
    explicit BufferInternal(InputIterator first, InputIterator last)
    :BufferInternal(first.base(), last - first)
    {}

    // move
    BufferInternal(BufferInternal &&other)
	{
		*this = std::move(other);
	}

    // mutile thread
    void auto_lock(bool lock = true)
    {
        __r.auto_lock = lock;
        if (lock && !__r.mtx) {
            __r.mtx = new mutex();
        }
    }
    bool is_auto_lock() const { return __r.auto_lock; }
	void lock() const { __r.lock(); }
	void unlock() const { __r.unlock(); }
	bool try_lock() const { return __r.try_lock(); }

	/// operator=

	// string
	BufferInternal& operator=(const BufferInternal &other)
	{
		parameterAssert(this != &other);
		if (this != &other) {
			release();
			lock();
			other.retain();
			__r = other.__r;
			unlock();
		}
		
		return *this;
	}

	// c-string
	BufferInternal& operator=(const char *s)
	{
		clear();
		append(s);
		return *this;
	}

	// move
	BufferInternal& operator=(BufferInternal &&rhs)
	{
        parameterAssert(this != &rhs);
		release();
        rhs.copy_buffer_and_override_this_if_needed();
        rhs.lock();
		__r = rhs.__r;
		rhs.__r.unused = 1;
        unlock();
		return *this;
	}

	/// capacity
	__type length() const
	{
		if (__r.substr) {
			return __r.substr_range.length;
		}
		return __len__(__r);
	}

	__type capacity() const
	{
		if (__r.substr) {
			return __r.substr_range.length;
		}
		return __cap__(__r);
	}

	__type refcnt() const { return __ref__(__r); }

	void resize(uinteger nsize)
	{
		copy_buffer_and_override_this_if_needed();
		lock();
		__r.__words = __rep::reallocate(__r.__words, nsize);
#if DEBUG
        if (__len__(__r) > nsize) {
            __get_pointer()[nsize] = 0;
        }
#endif
		__len__(__r) = nsize;
		unlock();
	}

	void clear()
	{
        if (__len__(__r) == 0) {
            return;
        }
		copy_buffer_and_override_this_if_needed();
		lock();
		__len__(__r) = 0;
#if DEBUG
        *__get_pointer() = 0;
#endif
		if (__cap__(__r) > 4 * 1024) {
			__r.__words = __rep::reallocate(__r.__words, 4 * 1024);
		}
		unlock();
	}

	bool isEmpty() const { return __len__(__r) == 0; }

	/// element access
	const char& operator[](uinteger pos) const
	{
		return at(pos);
	}
	char& operator[](uinteger pos)
	{
		return at(pos);
	}

	const char& at(uinteger pos) const
	{
        return const_cast<BufferInternal *>(this)->at(pos);
	}

	char& at(uinteger pos)
	{
		if (pos >= length()) {
            throwException(OutOfRangeException, "Index(%llu) is out of range(0, %llu)", pos, length());
		}
		return __get_pointer()[pos];
	}

	const char& back() const
	{
        return const_cast<BufferInternal *>(this)->back();
	}

	char& back()
	{
		assert(!isEmpty(), "It should not be an empty string.");
		return *(end() - 1);
	}

	const char& front() const
	{
		return const_cast<BufferInternal *>(this)->front();
	}

	char& front()
	{
		assert(!isEmpty(), "It should not be an empty string.");
		return *begin();
	}

	/// modifiers
	BufferInternal& append(const BufferInternal &str)
	{
		assert(__r.unused == false, "this has not own buffer pointer any more");
		assert(str.__r.unused == false, "Paramenter[str] has not own buffer pointer any more");
		copy_buffer_and_override_this_if_needed();
		lock();
		write(this->length(), str.__get_pointer(), str.length());
		unlock();
		return *this;
	}

	// substring
	BufferInternal& append(const BufferInternal &str, Range subRange)
	{
		if (subRange.maxRange() >= str.length()) {
			throwException(OutOfRangeException, "Sub range(%p@) is out of range(0, %llu)", subRange.description().get(), length());
		}
		assert(__r.unused == false, "this has not own buffer pointer any more");
		assert(str.__r.unused == false, "Paramenter[str] has not own buffer pointer any more");
		copy_buffer_and_override_this_if_needed();
		lock();
		write(this->length(), str.__get_pointer() + subRange.location, subRange.length);
		unlock();
		return *this;
	}

	// c-string
	BufferInternal& append(const char *s)
	{
		return append(s, strlen(s));
	}

	// buffer
	BufferInternal& append(const char *s, uinteger length)
	{
		copy_buffer_and_override_this_if_needed();
		lock();
		write(this->length(), s, length);
		unlock();
		return *this;
	}

	// fill
	BufferInternal& append(char c, uinteger n)
	{
		copy_buffer_and_override_this_if_needed();
		lock();
		prepare_write_length(n);
		memset(end().base(), c, n);
        __len__(__r) += n;
		unlock();
		return *this;
	}

	// range
	template <class InputIterator>
	BufferInternal& append(InputIterator first, InputIterator last)
	{
		return append(first.base(), last - first);
	}

	/// operator+=
	BufferInternal& operator+= (const BufferInternal& str)
	{
		return append(str);
	}

	// c-string
	BufferInternal& operator+= (const char* s)
	{
		return append(s);
	}

	// character
	BufferInternal& operator+= (char c)
	{
		return append(c, 1);
	}
	

	// insert
	BufferInternal& insert(uinteger pos, const BufferInternal& str)
	{
		return insert(pos, str.__get_pointer(), str.length());
	}

	BufferInternal& insert(uinteger pos, const BufferInternal& str, Range subRange)
	{
		parameterAssert(this != &str);
		return insert(pos, str.__get_pointer() + subRange.location, subRange.length);
	}

	BufferInternal& insert(size_t pos, const char* s)
	{
		return insert(pos, s, strlen(s));
	}

	BufferInternal& insert(size_t pos, const char* s, size_t len)
	{
		assert(__r.unused == false, "this has not own buffer pointer any more");
        parameterAssert(__get_pointer() != s);
        if (pos > length()) {
            throwException(OutOfRangeException, "Paramenter[pos(%zu)] is out of length(%llu)", pos, length());
        }
		copy_buffer_and_override_this_if_needed();
		lock();
		prepare_write_length(len);
		// move
        if (__len__(__r) != pos) {
            memmove(__get_pointer() + len + pos, __get_pointer() + pos, __len__(__r) - pos);
        }
		// copy
		memcpy(__get_pointer() + pos, s, len);
        __len__(__r) += len;
		unlock();
		return *this;
	}

	BufferInternal& insert(size_t pos, size_t count, char c)
	{
		assert(__r.unused == false, "this has not own buffer pointer any more");
        if (pos > length()) {
            throwException(OutOfRangeException, "Paramenter[pos(%zu)] is out of length(%llu)", pos, length());
        }
		copy_buffer_and_override_this_if_needed();
		lock();
		prepare_write_length(count);
		// move
		memmove(__get_pointer() + count + pos, __get_pointer() + pos, __len__(__r) - pos);
		// copy
		memset(__get_pointer() + pos, c, count);
        __len__(__r) += count;
		unlock();
		return *this;
	}

	iterator insert(const_iterator p, size_t n, char c)
	{
		auto __p = p - begin();
		insert(__p, n, c);
		return begin() + __p;
	}

	iterator insert(const_iterator p, char c)
	{
		return insert(p, 1, c);
	}

	template <class InputIterator>
	iterator insert(iterator p, InputIterator first, InputIterator last)
	{
		auto __p = p - begin();
		insert(__p, first.base(), last - first);
		return begin() + __p;
	}

    BufferInternal& erase(Range range)
    {
        uinteger len = range.maxRange();
        if (len > length()) {
            throwException(OutOfRangeException, "Parameter[range(%p@)] is out of range(0, %llu)", range.description().get(), length());
        }
        copy_buffer_and_override_this_if_needed();
        lock();
        if (len == __len__(__r)) {
            __len__(__r) = range.location;
#if DEBUG
            *end() = 0;
#endif
        } else {
            memmove(__get_pointer() + range.location, __get_pointer() + len, __len__(__r) - len);
            __len__(__r) -= range.length;
#if DEBUG
            __get_pointer()[__len__(__r)] = 0;
#endif
        }
        unlock();
        return *this;
    }
    iterator erase (const_iterator p)
    {
        auto __p = p - begin();
        erase(Range(__p, 1));
        return begin() + __p;
    }
    iterator erase (const_iterator first, const_iterator last)
    {
        auto __p = first - begin();
        erase(Range(__p, last - first));
        return begin() + __p;
    }

    // replace
    BufferInternal& replace(Range range, const BufferInternal &str)
    {
        return replace(range, str.__get_pointer(), str.length());
    }

    BufferInternal& replace(const_iterator i1, const_iterator i2, const BufferInternal& str)
    {
        parameterAssert(i1 < i2);
        parameterAssert(i2 < end());
        return replace(Range(i1 - begin(), i2 - i1), str.__get_pointer(), str.length());
    }

    BufferInternal& replace(Range range, const BufferInternal &str, Range subRange)
    {
        return replace(range, str.__get_pointer() + subRange.location, subRange.length);
    }

    BufferInternal& replace(Range range, const char *s)
    {
        return replace(range, s, strlen(s));
    }

    BufferInternal& replace(Range range, const char *s, uinteger length)
    {
        if (range.maxRange() > this->length()) {
            throwException(OutOfRangeException, "Replace %p@ is out of range(0, %llu)", range.description().get(), this->length());
        }
        erase(range);
        insert(range.location, s, length);
        return *this;
    }

    BufferInternal& replace(const_iterator i1, const_iterator i2, const char *s)
    {
        return replace(i1, i2, s, strlen(s));
    }

    BufferInternal& replace(const_iterator i1, const_iterator i2, const char *s, uinteger length)
    {
        return replace(Range(i1 - begin(), i2 - i1), s, length);
    }

    BufferInternal& replace(Range range, uinteger n, char c)
    {
        if (range.maxRange() > this->length()) {
            throwException(OutOfRangeException, "Replace %p@ is out of range(0, %llu)", range.description().get(), this->length());
        }
        erase(range);
        insert(range.location, n, c);
        return *this;
    }

    BufferInternal& replace(const_iterator i1, const_iterator i2, uinteger n, char c)
    {
        return replace(Range(i1 - begin(), i2 - i1), n, c);
    }

    template <class InputIterator>
    BufferInternal& replace (const_iterator i1, const_iterator i2,
                     InputIterator first, InputIterator last)
    {
        erase(i1, i2);
        insert(i1, first, last);
        return *this;
    }

    void push_back(char c)
    {
        assert(__r.unused == false, "this has not own buffer pointer any more");
        append(c, 1);
    }
    char pop_back()
    {
        assert(__r.unused == false, "this has not own buffer pointer any more");
        if (isEmpty()) {
            // TODO: throw
        }
        char c = back();
        erase(const_iterator(end().base() - 1));
        return c;
    }

    const char *UTF8String()
    {
        assert(__r.unused == false, "this has not own buffer pointer any more");
        if (length() == capacity()) {
            copy_buffer_and_override_this_if_needed();
            __r.__words = __rep::reallocate(__r.__words, __len__(__r));
        }
        __r.__words[__len__(__r)] = 0;
        return __get_pointer();
    }

    const char *data() const
    {
        return __get_pointer();
    }

    uinteger copy(char *s, Range range) const
    {
        uinteger len = range.length;
        if (range.maxRange() > length()) {
            len = length() - range.location;
        }
        memcpy(s, __get_pointer() + range.location, len);
        return len;
    }

    /// compare
    ComparisonResult compare(const BufferInternal &other) const
    {
        auto iter_s_this = this->begin() - 1;
        auto iter_e_this = this->end();
        auto iter_s_other = other.begin() - 1;
        auto iter_e_other = other.end();
        while (++iter_s_this != iter_e_this && ++iter_s_other != iter_e_other) {
            if (*iter_s_this == *iter_s_other) {
                continue;
            } else if (*iter_s_this > *iter_s_other) {
                return ComparisonResult::Descending;
            } else {
                return ComparisonResult::Ascending;
            }
        }
        auto length = this->length();
        auto otherLength = other.length();
        if (length == otherLength) {
            return ComparisonResult::Same;
        }
        else if (length > otherLength) {
            return ComparisonResult::Descending;
        } else {
            return ComparisonResult::Ascending;
        }
    }

    ComparisonResult caseInsensitiveCompare(const BufferInternal &other) const
    {
        BufferInternal str1(begin(), end());
        BufferInternal str2(other.begin(), other.end());
        std::transform(str1.begin(), str1.end(), str1.begin(), ::toupper);
        std::transform(str2.begin(), str2.end(), str2.begin(), ::toupper);
        return str1.compare(str2);
    }

    bool operator==(const BufferInternal &rhs) const
    {
        if (length() != rhs.length()) {
            return false;
        }
        return compare(rhs) != ComparisonResult::Same;
    }

    bool operator==(const char *rhs) const
    {
        if (!rhs) {
            return false;
        }
        auto e = end();
        auto s = begin();
        while (s != e && *rhs) {
            if (*s != *rhs) {
                return false;
            }
            ++s;
            ++rhs;
        }
        return s == e && !*rhs;
    }

    // C++ STL style iterator
    iterator begin() NOEXCEPT
    { return iterator(__get_pointer()); }

    const_iterator begin() const NOEXCEPT
    { return const_iterator(__get_pointer()); }
    const_iterator cbegin() const NOEXCEPT
    { return begin(); }

    iterator end() NOEXCEPT
    { return iterator(__get_pointer() + length()); }
    const_iterator end() const NOEXCEPT
    { return const_iterator(__get_pointer() + length()); }
    const_iterator cend() const NOEXCEPT
    { return end(); }

    reverse_iterator rbegin() NOEXCEPT
    { return reverse_iterator(end()); }
    const_reverse_iterator rbegin() const NOEXCEPT
    { return const_reverse_iterator(end()); }
    const_reverse_iterator crbegin() const NOEXCEPT
    { return rbegin(); }

    reverse_iterator rend() NOEXCEPT
    { return reverse_iterator(begin()); }
    const_reverse_iterator rend() const NOEXCEPT
    { return const_reverse_iterator(begin()); }
    const_reverse_iterator crend() const NOEXCEPT
    { return rend(); }

    // C++ output
    friend std::ostream& operator<<(std::ostream &os, const BufferInternal &buf)
    {
        return os.write(buf.__get_pointer(), buf.length());
    }
protected:
    void retain() const
    {
		lock();
        ++__ref__(__r);
		unlock();
    }

    void release()
    {
        __r.release();
    }

    bool need_copy_content_while_change_string() const
    {
        assert(__ref__(__r) != 0, "Logic error!");
        return __ref__(__r) > 1;
    }

    void copy_buffer_and_override_this_if_needed()
    {
        assert(__r.unused == false, "Critical: this<%p> has not own buffer pointer any more", this);
        if (need_copy_content_while_change_string()) {
            __r.lock();
            uinteger allocated_size = (length() / sizeof(value_type) + __buf_offset__ + 1) * sizeof(value_type);
            type_pointer np = (type_pointer)malloc(allocated_size);
            np[0] = 1;
            np[1] = allocated_size;
            auto p = __get_pointer();
            if (__r.substr) {
                memcpy(np, __r.__words - __buf_offset__, __buf_offset__ * sizeof(value_type));
                memcpy(np + __buf_offset__, p + __r.substr_range.location, __r.substr_range.length);
                __r.substr = 0;
                np[2] = __r.substr_range.maxRange();
            } else {
                memcpy(np, __r.__words - __buf_offset__, length() + __buf_offset__ * sizeof(value_type));
            }
            __r.unlock();
            release();

            if (__r.auto_lock) {
                __r.mtx = new mutex();
            }
            __r.__words = np + __buf_offset__;
        } else if (__r.substr && __ref__(__r) == 1) {
            __r.lock();
            auto p = (char *)__r.__words;
            memmove(p, p + __r.substr_range.location, __r.substr_range.length);
            __len__(__r) = __r.substr_range.maxRange();
            __r.substr = 0;
            __r.unlock();
        }
    }

    void write(uinteger startPos, const char *src, uinteger length)
    {
        prepare_write_length(length);
        memcpy(__get_pointer() + startPos, src, length);
        __len__(__r) += length;
    }

	void prepare_write_length(uinteger length)
	{
		uinteger nt = __len__(__r) + length;
		if (nt >= __cap__(__r)) {
			__r.__words = __rep::reallocate(__r.__words, nt);
		}
#if DEBUG
        __get_pointer()[nt] = 0;
#endif
	}

private:
    char * __get_pointer() NOEXCEPT
    {
        assert(__r.unused == false, "this has not own buffer pointer any more");
        if (__r.substr) {
            return (char *)__r.__words + __r.substr_range.location;
        }
        return (char *)__r.__words;
    }
    const char * __get_pointer() const NOEXCEPT { return const_cast<BufferInternal *>(this)->__get_pointer(); }
};

CC_END


#endif /* BUFFERINTERNAL */
