//
//  iterator
//  collection_codes
//
//  Created by hejunqiu on 2017/2/27.
//  Copyright © 2017年 CHE. All rights reserved.
//

#ifndef ITERATOR
#define ITERATOR

#include "defines.h"
#include <type_traits>
#include <stddef.h>
#include <iterator>

CC_BEGIN

template <class _Tp>
struct iterator_traits { };

template <class _Tp>
struct iterator_traits<_Tp*>
{
    typedef ptrdiff_t difference_type;
    typedef typename std::remove_const<_Tp>::type value_type;
    typedef _Tp* pointer;
    typedef _Tp& reference;
    typedef std::random_access_iterator_tag iterator_category;
};

template <typename _Iter>
class iterator {
    _Iter current;
public:
    typedef _Iter iterator_type;
    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
    typedef typename iterator_traits<_Iter>::difference_type difference_type;
    typedef typename iterator_traits<_Iter>::value_type      value_type;
    typedef typename iterator_traits<_Iter>::reference       reference;
    typedef typename iterator_traits<_Iter>::pointer         pointer;

    iterator() _NOEXCEPT : current() {}
    iterator(iterator_type __x) _NOEXCEPT : current(__x) {}

    iterator_type base() const _NOEXCEPT { return current; }
    reference operator*() const _NOEXCEPT { return *current; }
    pointer operator->() const _NOEXCEPT { ::std::addressof(operator*()); }

    iterator& operator++() _NOEXCEPT
    {
        ++current;
        return *this;
    }

    iterator operator++(int) _NOEXCEPT
    {
        iterator tmp(*this);
        ++(*this);
        return tmp;
    }

    iterator& operator--() _NOEXCEPT
    {
        --current;
        return *this;
    }

    iterator operator--(int) _NOEXCEPT
    {
        iterator tmp(*this);
        --(*this);
        return tmp;
    }

    iterator operator+(difference_type n) const _NOEXCEPT
    {
        iterator __w(*this);
        __w += n;
        return __w;
    }

    iterator& operator+=(difference_type n) _NOEXCEPT
    {
        current += n;
        return *this;
    }

    iterator operator-(difference_type n) const _NOEXCEPT
    {
        iterator __w(*this);
        __w -= n;
        return __w;
    }

    iterator& operator-=(difference_type n) _NOEXCEPT
    {
        current -= n;
        return *this;
    }

    reference operator[](difference_type n) const _NOEXCEPT
    { return current[n]; }
};

template<typename _Iter1, typename _Iter2>
bool operator==(const iterator<_Iter1> &x, const iterator<_Iter2> &y)
{
	return x.base() == y.base();
}

template<typename _Iter1, typename _Iter2>
bool operator<(const iterator<_Iter1> &x, const iterator<_Iter2> &y)
{
	return x.base() < y.base();
}

template<typename _Iter1, typename _Iter2>
bool operator!=(const iterator<_Iter1> &x, const iterator<_Iter2> &y)
{
	return !(x == y);
}

template<typename _Iter1, typename _Iter2>
bool operator>(const iterator<_Iter1> &x, const iterator<_Iter2> &y)
{
	return y < x;
}

template<typename _Iter1, typename _Iter2>
bool operator>=(const iterator<_Iter1> &x, const iterator<_Iter2> &y)
{
	return !(x < y);
}

template<typename _Iter1, typename _Iter2>
bool operator<=(const iterator<_Iter1> &x, const iterator<_Iter2> &y)
{
	return !(y < x);
}

template <class _Iter1, class _Iter2>
typename iterator<_Iter1>::difference_type operator-(const iterator<_Iter1>& __x, const iterator<_Iter2>& __y) _NOEXCEPT
{
	return __x.base() - __y.base();
}

template <typename _Iter>
class reverse_iterator {
    _Iter current;
public:
    typedef _Iter                                            iterator_type;
    typedef typename _Iter::difference_type difference_type;
    typedef typename _Iter::reference       reference;
    typedef typename _Iter::pointer         pointer;

    reverse_iterator() _NOEXCEPT : current() {}
    explicit reverse_iterator(_Iter __x) _NOEXCEPT : current(__x) {}

    _Iter base() const _NOEXCEPT {return current;}
    reference operator*() const _NOEXCEPT {_Iter __tmp = current; return *--__tmp;}
    pointer  operator->() const _NOEXCEPT {return _VSTD::addressof(operator*());}

    reverse_iterator& operator++() _NOEXCEPT
    {--current; return *this;}

    reverse_iterator  operator++(int) _NOEXCEPT
    {reverse_iterator __tmp(*this); --current; return __tmp;}

    reverse_iterator& operator--() _NOEXCEPT
    {++current; return *this;}

    reverse_iterator  operator--(int) _NOEXCEPT
    {reverse_iterator __tmp(*this); ++current; return __tmp;}

    reverse_iterator  operator+ (difference_type __n) const _NOEXCEPT
    {return reverse_iterator(current - __n);}

    reverse_iterator& operator+=(difference_type __n) _NOEXCEPT
    {current -= __n; return *this;}

    reverse_iterator  operator- (difference_type __n) const _NOEXCEPT
    {return reverse_iterator(current + __n);}

    reverse_iterator& operator-=(difference_type __n) _NOEXCEPT
    {current += __n; return *this;}

    reference         operator[](difference_type __n) const _NOEXCEPT
    {return *(*this + __n);}
};

template <class _Iter1, class _Iter2>
inline bool operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline bool operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline bool operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() != __y.base();
}

template <class _Iter1, class _Iter2>
inline bool operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline bool operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() <= __y.base();
}

template <class _Iter1, class _Iter2>
inline bool operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() >= __y.base();
}

CC_END

#endif /* ITERATOR */
